Group Name: Lee & Wang
Team Member1: Shengkai Li (sl4685)
Team Member2: Yuanming Wang (yw3472)

===============================================================================================================================
Clarification:
    Since our group only has two group members, Professor Steven has given us the permission to totally drop the functionalities of 
    `getcert` and `changepw`. Therefore, in this project, we only implemented `sendmsg`, `recvmsg`, and `server`. Also, we wrote a 
    bash script to generate all the clients' certificates.
===============================================================================================================================
Enviornment Requirments:
    Before testing our program, please make sure you have install the following requirments:
        1. sudo apt install build-essential
        2. sudo apt install libssl-dev
        3. sudo apt install openssl
        4. sudo apt install firejail (for sanboxing)
===============================================================================================================================
Set up:
     RUN "bash install.sh" or "./install.sh" will set up everything for you.
===============================================================================================================================
File Layout:
    After successfully runing "bash install.sh", a directory called 'project' will be generated under the current directory.
    There are four sub-directories in 'project':
        1. ca:
                Just Like HW2, this ca directory contains all the clients' certificates and private key.
        2. input:
                This directory contains four test text files.
        3. mailbox:
                This directory can only be read/write by our 'server'. Every clients has its own subdirectories.
                Those subdirectories are used to store intermediate messages pending to read.
        4. bin:
                This directory contains three excutables: `sendmsg`, `recvmsg`, `server`.
===============================================================================================================================
How to RUN/TEST:
    Those three excutables must be called under project/bin directory. Also, `sendmsg`&`recvmsg` and `server` should be called
    on the same machine but two sperate windows.
===============================================================================================================================
server:
    1. The `server` takes only one argument, port Number.
       Example: "./server 8888"
    2. Our server is able to handle both 'sendmsg' and 'recvmsg' requests.
       Just make sure you call "./server portNum" before "sendmsg" or "recvmsg".
    3. After `server` successfully handle one 'sendmsg'&'recvmsg' request,
       or some error occurs, `server` will exit. You need to restart `server`
       each time when you want to `sendmsg` or `recvmsg`.
    4. If user `forfend` sent a message to user `repine`, server will create a file
       called `forfend` under the mailbox/repine directory. The message is both encrpted
       and digitally signed.
       
       If `forfend` tries to send anothermessage to `repine` but `repine` did not
       receive the old message yet, the previous message will be replaced by the new message.
================================================================================================================================
sendmsg:
    1. The `sengmsg` read messages from stdin and takes at least four arguments.
       argument1:hostName, argument2:portNum, argument3:sender's name(who is sending msg)
       {argument4...argumentN}:list of recipient name
       Two examples of running `sendmsg`:
       a. `./sendmsg localhost 8888 unminced forfend exilic addleness`
       b. `./sendmsg localhost 8888 unminced forfend < ../input/00001`
    2. If username or any recipient of recipient list in invalid, `sendmsg` will report
       an error and exit.
================================================================================================================================
recvmsg:
    1. The 'recvmsg' takes three arguments:
       argument1:hostName, argument2:portNum, argument3:recipient name
       Example: "./recvmsg localhost 8866 exilic".
    2. 'recvmsg' will first verify the digital signiture. If the verfity
       failed, no message will be shown.
    3. If verify success, the message will be stored at the current directory
       (the bin directory).
       For exmaple:
       If there are three messages under the mailbox/repine directory,
       successfully excuting "./recvmsg localhost 8866 repine" will create three
       files under the bin directory. They are:
       repine0.txt, repine1.txt, repine2.txt. Each of them is decrpted and verified.
    4. If the recipient name is invalid, the `recvmsg` will report and error and 
       invalid.

===============================================================================================================================
Design Documents:

Login in: The login part in similar for both `sendmsg` and `recvmsg`.
1. The client side (user) sends certificates and their username to the server. Server uses the username to 
find and load the certificates (server knows all the clients' certificates). Then, server call X509_cmp() to
compare two certificates. If x509_cmp() returns false, the login in failed and server exits.

2. If the certificates from the client is valid. Server encrypts a message (such as "test test") using client's
certificates(public key) and send to client. Client needs to decrypt the message (using private key) to prove he/her 
actually owns the certificate. If the client side cannot corretly decrpt the ciphter text, the login is failed and server exits.

Sendmsg workflow: (for each recipient)
client:  receive certificate                                    server: send recipient's certificates
client:  generate public key from certificate                                       
client:  encrypt the message
client:  sign the encrpted message by priavte key
client:  send message to server                                 server: receive message and write to corresponding directory

Recvmsg workflow: (for each pending message)
client: receive message                                         server: send message
client: receive certificate                                     server: send sender's certificate
client: verify the signature on message
        exit if verify failed
client: decrypted the message to current directory              server: delete message from mailbox

3. Crucial security decisions and their rationale. The most important is how you divide a command into sandboxed and unsandboxed sections, and why:
 
 we put the sendmsg and recvmsg into the sandboxed sections and leave the server unsandboxed. this means that the server has the highest privilege. 
 we think the server should be able to access all certificates and the mailbox, which means basically everything in our project. 
 Therefore, there is no reason to put the server into the sandbox section. For sendmsg and recvmsg, we limit the access of these two program in the 
 ca directory because we don't want them to be able to access the root certificate or others' private key. the limitation of this is that the server 
 program has highest permission. if someone can access the server program, he or she will be able to access other's mailbox and decrypted the message inside. 
 but as I said, since the client and server are connecting using openssl, we assume the client can not directly access the server program and that's why we make this decision. 
 we use firejail to create the sandboxing. we do not use specific file permission because we believe we have everything covered in the sandboxed sections.
===============================================================================================================================

Test plan & Test cases

all test happens in ./Lee-Wang/project/bin

1. sendmsg on success

    Testing command:
        ./server 8888
        ./sendmsg localhost 8888 addleness analects annalistic < ../input/00001
    
    result:
        everything goes well. analects and annalistic successfully received the content in 00001 and stored the encrypted content in their mailbox.
    
2. recvmsg on success

    Testing command:
        ./server 8888
        ./recvmsg localhost 8888 analects
    
    result:
        everything goes well. the decrypted analects' mails appear in the bin file where you run recvmsg. in this case, it is the content of ./input/00001 sended by addleness
    
3. sendmsg with invalid username
    we test whether user can login with a incorrect username, and expect the sendmsg to reject the login
    
    Testing command:
        ./server 8888
        ./sendmsg localhost 8888 abcdefg analects annalistic < ../input/00001
        
    result:
        sendmesg exits with the error "wrong username"

4. sendmsg with invalid recipients
    we want to make sure user can not send msg to someone does not exists

    Testing command:
        ./server 8888
        ./sendmsg localhost 8888 addleness abcd efgh < ../input/00001
    
    result:
        sendmsg exits with the error "wrong recipient"
        
5. sendmsg with incorrect certificate
    user provide incorrect certificate and to see if the server reject the user
    
    Testing command:
        ./server 8888
        ./sendmsg localhost 8888 addleness analects annalistic < ../input/00001
        (the certificate file provided by the client side is incorrect. has to manually change the code in sendmsg to the path of the incorrcet certificate)
    
    result:
        the server exits with the error "certificate does not match"

6. sendmsg with large file
    we limit the maximum size of the msg to be 2000 because we don't want user to send a extremely large file
    
    Testing command:
        ./server 8888
        ./sendmsg localhost 8888 anthropomorphologically addleness < ../input/00004
        
    result:
        sendmsg exits with error message "msg size > 2000 bytes"

7. recvmsg with incorrect username
    we want to make sure the server will not crash if the user provides an invalid username

    Testing command:
        ./server 8888
        ./recvmsg localhost 8888 abcd
    
    result:
        recvmsg exits with error message "wrong userName"

8. recvmsg with incorrect certificate
    we want to make sure the user can not log in with an incorrect certificate
    
    Testing command:
        ./server 8888
        ./recvmsg localhost 8888 analects
        (the certificate file provided by the client side is incorrect. has to manually change the code in recvmsg to the path of the incorrcet certificate)
        
    result:
        the server exits with the error "certificate does not match"
        
9. block sendmsg's access to ca file
    we want to proof our sandbox is working, so we block the access to the entire ca dir to see if sendmsg can run. we expect it faces "permission denied"
    
    Testing command:
        echo "blacklist ${HOME}/Lee-Wang/project/ca" >> ~/.config/firejail/sendmsg.profile
        ./server 8888
        firejail ./sendmsg localhost 8888 neckar unrosed neckar  < ../input/00001
        
    result:
        yw3472@instance-1:~/Lee-Wang/project/bin$ firejail ./sendmsg localhost 8888 neckar unrosed neckar  < ../input/00001
        Reading profile /home/yw3472/.config/firejail/sendmsg.profile
        Reading profile /etc/firejail/disable-common.inc
        Reading profile /etc/firejail/disable-passwdmgr.inc
        Reading profile /etc/firejail/disable-programs.inc
        Warning: networking feature is disabled in Firejail configuration file
        Parent pid 12199, child pid 12200
        Child process initialized in 52.54 ms
        lode Certificate or Keyfile failed: Permission denied
        Parent is shutting down, bye...
    
10. block recvmsg's access to ca file
    we want to proof our sandbox is working, so we block the access to the entire ca dir to see if recvmsg can run. we expect it faces "permission denied"
    
    Testing command:
        echo "blacklist ${HOME}/Lee-Wang/project/ca" >> ~/.config/firejail/recvmsg.profile
        ./server 8888
        firejail ./recvmsg localhost 8888 analects
        
    result:
        yw3472@instance-1:~/Lee-Wang/project/bin$ firejail ./recvmsg localhost 8888 analects
        Reading profile /home/yw3472/.config/firejail/recvmsg.profile
        Reading profile /etc/firejail/disable-common.inc
        Reading profile /etc/firejail/disable-passwdmgr.inc
        Reading profile /etc/firejail/disable-programs.inc
        Warning: networking feature is disabled in Firejail configuration file
        Parent pid 14118, child pid 14119
        Child process initialized in 36.00 ms
        lode Certificate or Keyfile failed: Permission denied
        Parent is shutting down, bye...

===============================================================================================================================
                          
